<?php

define('PAGESLIDEREGION_NAME', 'pageslideregion');

/**
 * Implements hook_theme().
 */
function pageslideregion_theme($existing, $type, $theme, $path) {
  $info['toolbar__pageslideregion'] = array(
    'render element' => 'toolbar',
    'template' => 'toolbar--pageslideregion',
  );
  $info['block__pageslideregion'] = array(
    'render element' => 'elements',
    'template' => 'block--pageslideregion',
  );
  $info['region__pageslideregion'] = array(
    'render element' => 'elements',
    'template' => 'region--pageslideregion',
  );
  return $info;
}

/**
 * Implements hook_system_info_alter().
 */
function pageslideregion_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme') {
    $info['regions'][PAGESLIDEREGION_NAME] = t('PageSlide region');
  }
}

/**
 * Implements hook_page_build().
 */
function pageslideregion_page_build(&$page) {
  if (!empty($page[PAGESLIDEREGION_NAME])) {
    foreach (element_children($page[PAGESLIDEREGION_NAME]) as $child) {

      // Disable contextual links.
      if (!empty($page[PAGESLIDEREGION_NAME][$child]['#contextual_links'])) {
        unset($page[PAGESLIDEREGION_NAME][$child]['#contextual_links']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function pageslideregion_preprocess_block(&$variables, $hook) {
  if ($variables['block']->region == PAGESLIDEREGION_NAME) {
    if (empty($variables['block']->subject)) {
      $info = module_invoke($variables['block']->module, 'block_info');
      $variables['block']->subject = $info[$variables['block']->delta]['info'];
    }
  }
}

function pageslideregion_toolbar_pre_render($toolbar) {
  if (!is_array($toolbar['#theme'])) {
    $toolbar['#theme'] = array($toolbar['#theme']);
  }
  array_unshift($toolbar['#theme'], 'toolbar__pageslideregion');
  $toolbar['pageslideregion_toggle'] = array(
    '#theme' => 'links',
    '#links' => array(
      'toggle' => array(
        'title' => '<span class="pageslideregion-link">Sidebar</span>',
        'href' => '#',
        'html' => TRUE,
        'absolute' => TRUE,
        'external' => TRUE,
      ),
    ),
    '#attributes' => array('id' => 'pageslideregion-toggle'),
  );
  return $toolbar;
}

/**
 * Implements hook_page_alter().
 */
function pageslideregion_page_alter(&$page) {
  if (!empty($page[PAGESLIDEREGION_NAME])) {
    if (isset($page['page_top']['toolbar']) && user_access('access toolbar')) {
      // If the toolbar is available, add a pre-render function to display the
      // current shortcuts in the toolbar drawer.
      $page['page_top']['toolbar']['#pre_render'][] = 'pageslideregion_toolbar_pre_render';
    }

    $output = $page[PAGESLIDEREGION_NAME];
    unset($page[PAGESLIDEREGION_NAME]);

    $output['#access'] =  user_access('access toolbar');
    $output['#attached']['js'] = array(
      ctools_attach_js('pageslide.region', 'pageslideregion') => array(
        'scope' => 'footer'
      )
    );
    $output['#attached']['css'] = array(
      ctools_attach_css('pageslideregion', 'pageslideregion') => array(
        'scope' => 'footer'
      )
    );
    $output['#attached']['library'] = array(
      array('system', 'ui.accordion'),
      array('system', 'jquery.cookie'),
    );
    $page['page_bottom'][PAGESLIDEREGION_NAME] = $output;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function pageslideregion_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'page_alter' || $hook == 'page_build') {
    $group = $implementations['pageslideregion'];
    unset($implementations['pageslideregion']);
    $implementations['pageslideregion'] = $group;
  }
}



